(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{228:function(e,t,n){e.exports=n.p+"static/media/banner.f8a3dcae.jpg"},229:function(e,t,n){e.exports=n.p+"static/media/education.26671c63.png"},230:function(e,t,n){e.exports=n.p+"static/media/interview-preparation.2d8d38e2.jpg"},231:function(e,t,n){e.exports=n.p+"static/media/mentality.54e5af78.jpg"},232:function(e,t,n){e.exports=n.p+"static/media/networking.d48a4b74.jpg"},233:function(e,t,n){e.exports=n.p+"static/media/open-source.f0be015b.png"},234:function(e,t,n){e.exports=n.p+"static/media/resume.2efaf2c6.jpg"},235:function(e,t,n){"use strict";n.r(t);var o=n(0),a=n.n(o),i=n(126),r=n(37),s=n(227),h=n.n(s),l=n(162);var c={blockquote:function(e){var t=e.children;return a.a.createElement("blockquote",null,t)},heading:function(e){var t=e.children,n=e.depth,o="h".concat(n),i=t.toLowerCase().replace(/[^a-z]+/g,"-").replace(/(?:^-|-$)/g,"");return a.a.createElement(o,{id:i},a.a.createElement("a",{"aria-hidden":!0,href:"#".concat(i),rel:"nofollow noopener noreferrer",title:"Link to this section."},a.a.createElement("span",{"aria-label":"Link",role:"img"},"\ud83d\udd17")),t)},list:function(e){var t=e.children,n=e.ordered?"ol":"ul";return a.a.createElement(n,null,t)},list_item:function(e){var t=e.children;return a.a.createElement("li",null,t)},paragraph:function(e){var t=e.children;return a.a.createElement("p",{dangerouslySetInnerHTML:{__html:t}})}};function u(e){var t=e.text,n=e.type,o=Object(l.a)(e,["text","type"]);if("space"===n)return" ";if("text"===n)return a.a.createElement("span",{dangerouslySetInnerHTML:{__html:t}});if(!Object.prototype.hasOwnProperty.call(c,n))throw new Error('Missing markdown type "'.concat(n,'"'));var i=c[n];return a.a.createElement(i,o,t)}var d=new RegExp("^https?://".concat(window.location.hostname)),m=/^#/,p=function(e,t,n){if(!e)return n;var o="",a="";d.test(e)||(o=' rel="nofollow noopener noreferrer"',a=' target="_blank"');var i=t?' title="'.concat(t,'"'):"";return"<a"+' href="'.concat(e,'"')+o+a+i+">"+n+"</a>"},y=function(e){return function(t,n,o){if(null===t)return o;var a=t;if(m.test(t)){var i=t.substring(1);Object.prototype.hasOwnProperty.call(e,i)&&(a=e[i])}var r=n?' title="'.concat(n,'"'):"";return"<img"+' alt="'.concat(o,'"')+' src="'.concat(a,'"')+r+' width="100%" />'}};function w(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Object.create(null),t=new s.Renderer({breaks:!0,gfm:!0,xhtml:!0});return t.image=y(e),t.link=p,t}var f=/_end$/,g={gfm:!0},b=/_start$/,v=function(e,t){for(var n=e,o=0;o<t;o++)n=n.text[n.text.length-1];return n},k=function(e,t){return a.a.createElement(u,Object.assign({key:t},e))};function I(e){var t=e.children,n={text:[]},o={renderer:w(e.images)},a=h.a.lexer(t,g),i=0,s=!0,l=!1,c=void 0;try{for(var u,d=a[Symbol.iterator]();!(s=(u=d.next()).done);s=!0){var m=u.value,p=v(n,i);if(b.test(m.type))p.text.push(Object(r.a)({text:[]},m,{type:m.type.replace(b,"")})),i++;else if(f.test(m.type))p.text=p.text.map(k),i--;else if(Object.prototype.hasOwnProperty.call(m,"text")){var y=h.a.inlineLexer(m.text,[],o);p.text.length>0&&"text"===p.text[p.text.length-1].type?p.text[p.text.length-1].text+=" ".concat(y):p.text.push(Object(r.a)({},m,{text:y}))}else p.text.push(m)}}catch(I){l=!0,c=I}finally{try{s||null==d.return||d.return()}finally{if(l)throw c}}return n.text.map(k)}var j,T,x,_,O,S,q,L,C,W,A,P,Y=n(31),D=n(4),R="@media (min-width: 66rem)",E="@media (max-width: 66rem)",M='"Lucida Grande", "Lucida Sans Unicode", "Lucida Sans", Geneva, Arial, sans-serif',z='Georgia, Cambria, "Times New Roman", Times, serif',F={position:"relative","&:hover > a":{opacity:.5},"& > a":{alignItems:"center",display:"inline-flex",height:"100%",left:-32,opacity:0,paddingRight:16,position:"absolute",textDecoration:"none",top:0,"& > span":{fontSize:16}}},H=Object(D.a)({root:(P={fontSmoothing:"antialiased",margin:"2em auto",padding:"2em 1em",textRendering:"optimizeLegibility"},Object(Y.a)(P,R,{paddingLeft:"11rem",paddingRight:"11rem"}),Object(Y.a)(P,"& a",{textDecoration:"underline"}),Object(Y.a)(P,"& blockquote",(T={borderLeftColor:"rgba(255, 255, 255, 0.84)",borderLeftStyle:"solid",borderLeftWidth:3,paddingBottom:2},Object(Y.a)(T,R,{marginLeft:"calc(10rem - 23px)",marginRight:"10rem",marginTop:38,paddingLeft:20}),Object(Y.a)(T,E,{marginLeft:-16,marginRight:0,marginTop:30,paddingLeft:17}),Object(Y.a)(T,"& > p",(j={fontStyle:"italic",paddingLeft:0,paddingRight:0},Object(Y.a)(j,R,{fontSize:21}),Object(Y.a)(j,E,{fontSize:18}),j)),T)),Object(Y.a)(P,"& code",{backgroundColor:"rgba(255, 255, 255, 0.05)",fontFamily:'Menlo, Monaco, "Courier New", Courier, monospace',margin:"0 2px",padding:"3px 4px"}),Object(Y.a)(P,"& h1",Object(r.a)({fontFamily:z,fontSize:42,fontWeight:400,letterSpacing:0,lineHeight:1.25,margin:0,marginBottom:16,textAlign:"left"},F,{"& + p":{marginTop:8}})),Object(Y.a)(P,"& h2",Object(r.a)({fontFamily:M,fontWeight:600,letterSpacing:"-0.015em",lineHeight:1.15,margin:0,marginTop:56},F,(_={},Object(Y.a)(_,R,{fontSize:34}),Object(Y.a)(_,E,{fontSize:30}),Object(Y.a)(_,"& + h3",(x={},Object(Y.a)(x,R,{marginTop:23}),Object(Y.a)(x,E,{marginTop:31}),x)),Object(Y.a)(_,"& + p",{marginTop:8,"& > img":{marginTop:36}}),_))),Object(Y.a)(P,"& h3",Object(r.a)({fontFamily:M,fontSize:26,fontWeight:600,letterSpacing:"-0.012em",lineHeight:1.22,margin:0},F,(O={},Object(Y.a)(O,R,{marginTop:39}),Object(Y.a)(O,E,{marginTop:31}),Object(Y.a)(O,"& + p",{marginTop:6}),O))),Object(Y.a)(P,"& h4",Object(r.a)({fontFamily:M,margin:0},F)),Object(Y.a)(P,"& h5",Object(r.a)({fontFamily:M,margin:0},F)),Object(Y.a)(P,"& h6",Object(r.a)({fontFamily:M,margin:0},F)),Object(Y.a)(P,"& p",(L={fontFamily:z,fontWeight:400,lineHeight:1.58,marginBottom:0},Object(Y.a)(L,R,{fontSize:21,letterSpacing:"-0.003em",marginTop:38}),Object(Y.a)(L,E,{fontSize:18,letterSpacing:"-0.004em",marginTop:30}),Object(Y.a)(L,"& + blockquote",(S={},Object(Y.a)(S,R,{marginTop:29}),Object(Y.a)(S,E,{marginTop:21}),S)),Object(Y.a)(L,"& + h2",(q={},Object(Y.a)(q,R,{marginTop:56}),Object(Y.a)(q,E,{marginTop:28}),q)),L)),Object(Y.a)(P,"& ul",(A={paddingLeft:0},Object(Y.a)(A,R,{marginTop:29}),Object(Y.a)(A,E,{marginTop:21}),Object(Y.a)(A,"& > li",(C={fontFamily:z,lineHeight:1.58,marginBottom:14,marginLeft:24,paddingLeft:6},Object(Y.a)(C,R,{fontSize:21,letterSpacing:"-0.003em"}),Object(Y.a)(C,E,{fontSize:18,letterSpacing:"-0.004em"}),C)),Object(Y.a)(A,"& > p",(W={},Object(Y.a)(W,R,{marginTop:29}),Object(Y.a)(W,E,{marginTop:21}),W)),A)),P)}),B=function(e){e&&document.body.scrollIntoView()},N=H(function(e){var t=e.children,n=e.classes,o=e.images;return a.a.createElement(i.a,{className:n.root,ref:B},a.a.createElement("article",null,a.a.createElement(I,{images:o},t),a.a.createElement(I,null,"\n## Conclusion \ud83d\udd1a\n\nTo read more of my articles or follow my works, you may connect with me on\n[LinkedIn](https://www.linkedin.com/in/charles-stover) and\n[Twitter](https://twitter.com/CharlesStover). It\u2019s quick, it\u2019s easy, and it\u2019s\nfree!\n\nYou can also check out my portfolio on\n[CharlesStover.com](https://charlesstover.com/).\n")))}),G=n(228),U=n.n(G),K="# Become the junior developer that companies want to hire.\n\n![Banner](#banner.jpg)\n\n## Preface \ud83d\udd30\n\n### Who am I, and why listen to me?\n\nAs a self-taught web developer, I struggled to overcome the barriers of entry\ninto the workforce. I had always done well in academia, which resulted in\nprofessor affirmation, offers for advanced classes, and offers for\nscholarships. I naively believed the workforce to behave similarly: that all I\nhad to do was _be good at what I did_ and the jobs would come to me. If I could\npass an interview the way I could pass a test, my encyclopedic knowledge of\nprogramming would make finding a job easy.\n\nThat was not the case. Not only did job offers not come flooding into my\nmailbox, but I could rarely get a response to an application when I reached out\nto companies directly. What was wrong? I was a good developer. I could solve\nreal world problems. I had created applications and met customer demands.\nSomehow, I was wholly unprepared for an enterprise setting.\n\nI doubted my abilities. My ego was crushed. I thought I was intelligent; I\nthought my projects pushed the envelope; but employers seemed to disagree. They\noften did not see me as even worth interviewing. The most common feedback I\nreceived was that they required a degree. The fact that I had invented\napplications that generated revenue did not matter. I gave up and pursued other\npassions, leaving web development as my favorite pastime that it had always\nbeen.\n\nYears later, I decided to pursue web development again after encouragement from\nmy peers. I was still passionate about it. I was good at it. It made me happy.\nI attempted to re-enter the workforce, knowing from past experience that it\nwould not be easy. I took the act of job searching much more seriously than\nbefore. The difference? _Humility._ You should _know what you don\u2019t know_, and\nI knew there was something I did not know about web development careers and how\nthey differed from web development as a hobby.\n\nI spent a lot of time researching how to build a r\xe9sum\xe9 and portfolio, the\ninterview process, and the soft skills of developer careers. I sought r\xe9sum\xe9\nand portfolio critique. I did as many practice interviews as I could book. I\nnetworked every opportunity. I still research these topics to this day. I take\na strong interest in them, as my ignorance of these topics held me back for so\nlong. I am passionate that other developers be prepared to face these issues as\nwell, especially those whom are self-taught, because they are often overlooked\nin academia and barely existent online.\n\nSince entering an enterprise setting, I have been involved with as much\ninterview training, sat on as many interview panels, and gathered as much\nemployee feedback as possible. I have applied what I have learned to everyone I\nhave come across who seeks it\u200a\u2014\u200afrom\n[Reddit](https://www.reddit.com/user/Charles_Stover) threads to direct\n[LinkedIn](https://linkedin.com/in/charles-stover) messages. This is my attempt\nto publicly document and share this knowledge, in hopes that talented and\nself-motivated developers receive the fair shot at success they deserve.\n\n## Education \ud83d\udc68\u200d\ud83c\udf93\ud83d\udc69\u200d\ud83c\udf93\n\n![Education](#education.png)\n\nBefore you can become a junior developer that is in demand, you must first\nbecome a _junior developer_. This article is not equivalent to an education.\nThis article is meant to be supplemental to an education, be it formal or\nself-driven.\n\n[Cracking the Coding Interview](https://amzn.to/2WLr1bG) by Gayle Laakmann\nMcDowell is another powerful education supplement that I highly recommend. It\ncovers many of the soft skills required by companies and ensures you know the\nhard skills. You will see it recommended time and time again online, and it is\neasily worth the $30 investment.\n\nI encourage anyone to at least read the data structures and algorithms\ndiscussed in that book. If you can already solve the problems, implement the\ndata structures, or create the algorithm, then just go to the next one. If you\nfind yourself feeling a bit hazy about the implementation details, I strongly\nrecommend that _you write it yourself_. This will add to your portfolio and\nhelp solidify the knowledge in your mind. Learning through teaching is a\npractice that I recommend often. It was my inspiration for\n[Implementing Quicksort in JavaScript](https://medium.com/@Charles_Stover/implementing-quicksort-in-javascript-8044a8e2bf39)\nand the resulting\n[GitHub repository](https://github.com/CharlesStover/quicksort-js) and\n[NPM package](https://www.npmjs.com/package/@charlesstover/quicksort) for my\nportfolio.\n\nYou need go a step further than merely knowing what the data structures and\nalgorithms are. Understand the trade-offs between them. When do you choose one\nover another? Which is more extensible and under what conditions? Which uses\nless memory or is faster to execute? When would you want to trade memory or\nefficiency for these other features and why? Knowing the answers to these\nquestions will be very important during your interview process. You will almost\ncertainly be asked to solve a problem that requires a complex data structure.\nWhichever you choose, you will want to be able to defend. \u201cIt\u2019s the first data\nstructure I remembered\u201d does not fly too well on a production application, so\nit does not fly too well in an interview either.\n\n## Open Source \ud83d\udcc4\n\n![Open Source](#open-source.png)\n\nIt may seem obvious, but a portfolio is meant to be a document of your\naccomplishments. So document them! _Thoroughly._ I mistakenly spent my earliest\nyears creating proprietary software. My server-side code was backed up to\nseveral hard drives, and my JavaScript never saw user eyes without first being\nran through a minifier. I believed that in order for code to be profitable, it\ncan\u2019t be copied. _I was wrong._\n\nI encourage you to open-source as much as possible. Your Quicksort\nimplementation is not doing you any favors on your hard drive. Your\nintro-to-programming video game may be embarrassingly inefficient, but you are\nselling it short. These beginner\u2019s projects show:\n\n* You wanted to make something and have an interest in programming outside of\n  work.\n* You learned to make something and are both willing and capable of learning\n  new technologies as needed.\n* You completed a project without giving up. You can see challenges through to\n  the end by overcoming obstacles instead of quitting.\n* You _did something_. If you do not publish your code, employers will assume\n  that you _never wrote it_. It is so much better to write something\n  inefficient than to write nothing at all.\n\nSince open-sourcing my projects, my development career has earned more value\nthan those projects ever offered me on their own. I have received a\n[significant amount](https://github.com/CharlesStover/reactn/issues?q=is%3Aissue+is%3Aclosed)\nof\n[community feedback](https://github.com/CharlesStover/use-react-router/issues?q=is%3Aissue+is%3Aclosed)\nthat has allowed me to prioritize what is important to customers and account\nfor use cases and environments I never would have otherwise considered. Bugs\nthat never existed in my environment have arisen in others\u2019. From their\nreports, I have identified and learned from mistakes in my code designs. Today,\nI can create components and packages that are extensible to more use cases than\njust my personal portfolio and projects. These learned concepts and deeper\nunderstanding of technologies improve my quality of work.\n\nFor each project, I recommend adding the following to its `README.md`:\n\n* An actual name. `repository-name` is nice and automated, but try to give it a\n  description that differentiates you from other candidates. Every candidate\n  has a \u201cTODO App\u201d and \u201cShopping List.\u201d Why is yours better? Try \u201cReact TODO\n  App\u201d or \u201cMongoDB Shopping List.\u201d\n* An actual description. \u201cTODO App\u201d can mean a lot of things. It is obvious to\n  you, because you made it. What\n  [CRUD operations](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete)\n  does it support? Does it use server-side code? Who is the target audience?\n  What problem are you solving and how? For example, my\n  [Shopping List](https://github.com/CharlesStover/shopping-list) application\n  \u201cwas created for my father, who needed a printable shopping list for his home\n  care aides. To support his declining memory, the application keeps track of\n  past items so that they may be re-added with ease.\u201d I have put the customer\n  first, identified a problem, and executed on a solution.\n* The tech stack used. HTML, JavaScript, React, PHP, SQL, Docker? Let people\n  know what you have experience using. Even if your project is not the cleanest\n  code or optimal implementation, you have demonstrated that you understand\n  these technologies at least in concept. You know what problems they solve,\n  and that\u2019s the largest hurdle. Perfecting their use can be learned on the\n  job.\n* Nobody, and I mean nobody, is going to clone your repository, install it,\n  then run it locally just to see your work. Companies are often flooded with\n  candidates (whether or not they are good candidates). They will just move on\n  to the next candidate instead. At this point in time, to the company, you are\n  statistically likely to be average. Their time is better spent researching\n  another candidate than wasting time or muddying their machine. If your\n  project is front end, consider deploying it to\n  [GitHub Pages](https://pages.github.com/). If your project is not front end,\n  consider adding screenshots of any GUI, linking to a live demonstration of\n  any API, or documenting example inputs and outputs.\n* Document your API, if there is one. This is good experience and practice for\n  when you are creating highly used, production-facing APIs in an enterprise\n  setting. Companies want good documentation, even for APIs that are only used\n  internally. Every time an internal customer references the documentation,\n  there is one less support ticket to answer and one more free hour for a\n  developer to implement new features instead of support existing ones. When\n  the creator of an API leaves the company, how quickly can their replacement\n  support the service they have inherited? Many companies have been burned by\n  this before, and they know that good documentation is indicative of\n  team-thinking.\n\n## Networking \ud83c\udf10\n\n![Wiki Meetup in Thailand at Central Embassy by Mohammed Galib Hasan (CC BY-SA 4.0, unmodified)](#networking.jpg)\n\nIf you want to _stand out_, then you first need to _stand_. Not only should\nrecruiters be able to find you, they should be impressed by what they see. Get\nyour name out there for good reasons.\n\n### LinkedIn\n\nUnder your [Career Interests](https://www.linkedin.com/jobs/career-interests/),\nlet recruiters know you are open. Reply to every recruiter, whether or not you\nwant the job. Practice your professional communication skills. Practice putting\ncomplex social and career situations into words that are articulate and\nunoffensive. These skills will translate both into an interview setting and the\nworkplace. Sometimes, you know what you want, but you do not quite know how to\nsay it. Later, when you are interviewing, it will be good to be able to\narticulate professionally what it is that you want from the job\u200a\u2014\u200aand that is\nthe best way to get it.\n\nPractice declining jobs in which you are not interested without burning\nbridges. That recruiter may reach out to you in the future with a better\nopportunity more tailored to your interests. Similarly, job offers that you do\nnot accept today may become desirable in the future. Finally, when you leave\nyour first job for your second, your experience in rejecting your current\ncompany _without burning bridges_ will help you get that professional\nrecommendation.\n\nSqueeze recruiters for information. Find out what is in demand. For what skills\nare they looking? If they inform you that you are not the right fit for a\nposition, ask them why. What are you lacking? What should you study? If you\nre-apply in some number of months, what do they want to see improved that could\nland you the position? Drop your pride, up your humility, and understand that\nemployers want an employee that can _learn_, not one who thinks they know\neverything already. A candidate telling me that they will be back and more\nready than ever is a very positive sign. It shows dedication, it shows an\neagerness to learn, and if they come back having corrected their faults, it\nshows an ability to _succeed_ at their goals.\n\nLearn your worth. No matter the recruiter or the position,\n_what is the compensation_? What does a front end engineer make in Seattle?\nWhat does a PHP developer make in Indiana? What does a React Native developer\nmake in India? (Do note that I included a location in each of these. The\ngreatest determinant for compensation is location!) When your first job offer\ninevitably asks what you want as far as compensation,\n_you will know what you are worth_. Do not be afraid to high-ball. Once they\nhave decided that they want you, they will not just reject you for asking too\nmuch. They will counter with their max. This is better than low-balling\nyourself and making closer to minimum wage than your worth. This is a great way\nto lose motivation, feel underappreciated, and quickly burn out during your\njob.\n\nLink to your LinkedIn profile liberally. Your projects outside of LinkedIn\nshould include links to LinkedIn. Recruiters who are impressed by your work\nneed a way to contact you. Developers who are impressed by your work may be\nwilling to give you a job recommendation. For example, I end every Medium\narticle with \u201cFollow me on\n[LinkedIn](https://www.linkedin.com/in/charles-stover/).\u201d At this time, these\nlink shares have resulted in 300 connections.\n\n_Stand_, and allow yourself to be found.\n\n### Twitter\n\nKeep your Twitter account professional. It is okay to have personal tweets, but\ndo not have anything controversial. Build a following by constantly tweeting\nwhat you have accomplished, and share your Twitter profile on your projects to\nbuild a following. For example, I end every Medium article with \u201cFollow me on\n[Twitter](https://twitter.com/CharlesStover).\u201d At this time, these link shares\nhave resulted in 300 followers.\n\nTwitter is free marketing. I have never made a social tweet. I maintain a\nstrictly business Twitter account. If I post what I have made, people will see\nit, interact with it, provide feedback, and share it. Related hashtags, such as\nthe tech stack, can be used to encourage bots to auto-retweet you for a wider\naudience.\n\n## R\xe9sum\xe9 \ud83d\udcbc\n\n![Photo by Staff Sgt. Kayla Rorick](#resume.jpg)\n\nThe million dollar questions are, \u201cHow do you stand out from every other\nequally-education recent college graduate?\u201d and \u201cHow do you show that your\nself-taught education is equal to your accredited competitors?\u201d\n\nFirst things first, actually write your r\xe9sum\xe9! Be sure to keep your portfolio\nand r\xe9sum\xe9 in sync with your LinkedIn. This helps recruiters find you and know\nwhat tech stacks with which you are familiar.\n\nKeep your r\xe9sum\xe9 to one page. If you think you need more than that because you\nhave accomplished so much, _you are wrong_. For reference, my 17 years of\nexperience is still\n[a one page r\xe9sum\xe9](https://charlesstover.com/resume/2019-05/charles-stover-resume.pdf).\nIt is more likely that you are including information that should not be in a\nr\xe9sum\xe9. Remember that a r\xe9sum\xe9 gets you to the interview. The fine details come\nup in the interview itself.\n\nLinkedIn often has promotions with free courses on their\n[LinkedIn Learning](https://www.linkedin.com/learning/) platform. Completing\nthese courses adds a Certification entry to your LinkedIn profile\u200a\u2014\u200aan easy and\nfun way to stand out.\n\nTailor your r\xe9sum\xe9 to the job to which you are applying. Your education,\nexperience, interests, and goals can all be conversation pieces during the\ninterview. Know how they relate to the job. What formal training have you had\nin the field? Note college courses or online training that were particularly\nrelevant. What past work applies specifically to this job? Remove unrelated\nprojects. An employer seeking a front end engineer is not going to ask you\nabout the time you coded a\n[Caesar cipher](https://en.wikipedia.org/wiki/Caesar_cipher) in assembly. Any\ntime they spend reading about it is mental fatigue that turns them off to you\nas a candidate. Any time they spend discussing it with you is likely time\nwasted. They will not have learned if you are a correct fit for the job. That\ntime is better spent informing them of your strengths in the field.\n\nDo not list items on your r\xe9sum\xe9 that you cannot defend. You may think you need\nto lie to land an interview, but you do not. Part of the interview process is\nspecifically tailored to weed out liars. You achieve nothing more than wasting\neveryone\u2019s time, including your own. You will be grilled on technologies you\nlist and asked to give specifics about past projects. It will be apparent if\nyou are not familiar with these technologies or supposed projects. It does not\nlook good to claim to have worked with NPM and Travis CI but be unable to\ndefine them, what problems they solved, or how these tools solved those\nproblems. Even vague answers can be red flags. You know that NPM managed your\nNode packages, but you do not know what packages, why you would want this tool\non your project, or the commands you used. These are great reasons to\nexplicitly not hire you. It would realistically be a better choice to hire a\ncandidate who has no experience with NPM than one who supposedly does have\nexperience but cannot answer the above. The inexperienced candidate may be able\nto learn. The lying candidate has demonstrated that they are incapable of\nlearning.\n\nI do not say the above to make you fear of listing a technology on your r\xe9sum\xe9.\nI say the above to emphasize how many candidates lie, how employers have come\nto expect this, and to encourage you not to waste your time lying also. If you\nhonestly have experience with a technology, do not be afraid to list or discuss\nit. If you do not know the answer to a question, admit it and explain why. \u201cWe\nused NPM to install packages, but the only one I know is `npm install`. The\nCI/CD pipeline ran the rest automatically, so I am unfamiliar with them.\u201d You\nhave demonstrated that you do understand what the tool is and what the tool\nsolves. You have not demonstrated that you are incapable of learning. If I\nheard this answer, I would think you are perfectly capable of learning NPM\nbetter on the job. This is in stark contrast to the lying candidate who claims\nto have used a tool but cannot offer specifics about when, where, or why.\n\n_Sell yourself._ Don\u2019t _sell yourself short_. Be proud of what you have\naccomplished and be confident in your verbiage. You did not \u201cmake a small\nwebsite for a friend.\u201d You \u201cexceeded a customer\u2019s expectations by delivering a\naccessibility-compliant single-page-application and maintain it through an\nIssues tracker and a CI/CD pipeline.\u201d Employers do not want to make small\nwebsites for your friends. They want to make SPAs, perform long-term\nmaintenance, track issues, and automate deployment. Your description of your\nproject should not be \u201cI made a tic-tac-toe clone in the browser,\u201d but \u201cA React\napplication that implements Flux architecture through Redux, supporting\nkeyboard navigation and performing animations with CSS.\u201d Remember to tailor the\nr\xe9sum\xe9 to the job and describe your projects with marketable terms.\n\n## Mentality \ud83e\udde0\n\n![Mentality](#mentality.jpg)\n\n### Know yourself.\n\nWhy are you interviewing for this position? What are your short and long term\ngoals, and how does this position help you reach them?\n\nFor my last interview, my answers to these questions were: I want a higher\nskill ceiling than my previous job. I want to be challenged to learn new\ntechnologies and better myself. I feel like I have plateaued at my previous\nplace of employment, and I have an intrinsic motivation to become the best\ndeveloper that I can be.\n\nEmployers want to know you are a right fit for them. If you just want money,\nyou are a right fit anywhere\u200a\u2014\u200ameaning there is no guarantee you will remain\nloyal when a competitor offers more. They do not want to invest in you if this\nis the case. For my last career shift, I would have been willing to take a pay\ncut, because it meant I could achieve greater things, and that is what mattered\nto me.\n\n### Interviews should not be scary.\n\nYou should have the mentality that every interview is good for you. Much the\nway you can squeeze a recruiter for information, you can do the same with an\ninterview. Determine what tech stacks their company uses, what skills are in\ndemand, and why they are not interested. Some interviewers are unable to give\nyou this information without first passing it through to HR, so be sure to\nfollow up with HR after the interview. Use this information to better yourself\nbetween interviews.\n\nInterview places that you \u201cknow\u201d you will not accept. I put know in quotes,\nbecause I have known someone to accept a job offer after following this advice,\ninterviewing with no intention of accepting, finding out they actually loved\nthe company, and accepting the offer. This is my only morally-ambiguous piece\nof advice. Practice interviewing at places in which you do not have an\ninterest. Squeeze them for the same information\u200a\u2014\u200awhat is their tech stack,\nwhat skills do they value, in what areas can you improve, and if you receive a\njob offer, what is your worth? These practice interviews will allow you to\nbetter communicate your soft skills with less anxiety, and it will show when\nyou take on an interview for a job that you really want.\n\nTreat your interview like it your first day on the job. This should help\ndecrease your anxiety and feel less pressure of being judged. Interact with the\ninterviewer as if they are your coworker. The entire point of an interview is\nfor the interviewer to determine how you would behave on the job. When they ask\nyou questions, it is not because this is a test, and you have to achieve 90% of\nhigher to pass. It is because they want to see your thought process when you\nare given real world problems to solve. This thought process is not just\ngetting a right or wrong answer. How many edge cases did you consider? Could\nyou discern which did or did not apply to the customer in this use case? Did\nyou take extra steps when solving the problem to make your code extensible to\npossible future modification, despite it not being a part of the current\nfeature request? Can you communicate difficult technical concepts, data\nstructures, algorithms, and their trade offs? Do you know when to ask for help,\nor do you think you know everything? These are potential areas in which the\ninterviewer is taking notes, because these are the things you will work on in a\nteam. Engage your interviewer. Talk to them. Ask them questions. Describe your\nthought process. Think out loud. Seeing them as a coworker really helps aid in\nthis task.\n\n## Interview Preparation \ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc69\u200d\ud83d\udcbc\n\n![Interview Preparation](#interview-preparation.jpg)\n\nTo prepare for your interview, make sure that you are intimately familiar with\nthe [S.T.A.R. format](https://en.wikipedia.org/wiki/Situation,_task,_action,_result).\nWhen your interviewer asks you to describe an event, try your best to answer\nwith S.T.A.R. This ensures you provide the information for which your\ninterviewer is probing and that there is no miscommunication between the two of\nyou. If you misinterpreted the question, it should become clear by the\nsituation or task that you are answering the wrong question. If you are\nanswering the right question, the interviewer may be looking for relevant\nexperience (situation), problem identification or communication skills (task),\nproblem-solving or technical skills (action), or ability to deliver results,\ncompromise, or learn from mistakes (result). By answering with S.T.A.R., your\nbases are covered, and strong communication is achieved.\n\n### Create a list of your most impressive projects.\n\nImpressive is subjective, but here I mean the projects that were the most\nextensive or unique. You worked on a team, you worked with clients, you worked\nwith a manager, you received notable amounts of community feedback, it went\nviral, or you accomplished something that took weeks not hours. Prepare to\nreference your most impressive projects during behavioral questions. Unlike the\nquantitative, encyclopedic knowledge of programming, sometimes you can draw a\nblank when asked qualitative questions. You have so much experience writing for\nloops and traversing arrays that it comes second nature when asked to do so.\nUnfortunately, when asked to \u201cname a time you had a disagreement with a\nsuperior,\u201d you might not have an example at the ready. Your mind can go blank\nas you try to process this question.\n\n>What if I\u2019ve never had a disagreement? If I say I have not, do I sound\ninexperienced or like I\u2019m lying? And if I have, will it sound like I am\ndifficult to work with or oppositional? What counts as a disagreement? Who\ncounts as a superior? I have little to no work history! How am I supposed to\nhave disagreed with a superior?\n\nDo be aware that behavioral questions do not typically mean _on the job_. In\nthe previous question, a superior may be a professor or a mentor. A\ndisagreement does not need to be a heated argument, but could be different\nopinions on implementation details. You can make the question as generic as it\nneeds to be to have an answer, and that\u2019s why creating a list of your most\nimpressive projects up front can be beneficial.\n\nI highly recommend reading through\n[Amazon\u2019s Leadership Principles](https://www.amazon.jobs/en/principles). These\nare some of the most well-rounded, all-encompassing, and rigorously tested\nbehavioral skills on the Internet. You would be hard-pressed to find a soft\nskill that is both important and not on this list. For each leadership\nprinciple, I recommend associating it with one of your impressive projects. Add\nnew projects or situations as needed.\n\n* Project A\u200a\u2014\u200aI _learned_ something new.\n* Project B\u200a\u2014\u200aI _invented_ a tool to aid the development process.\n\nYou may absolutely assign multiple principles to a single project, but I\nstrongly recommend that you have a project or situation for each principle. If\nyou find yourself unable to associate some, think harder. Try removing the job\nor development aspect from the association. A time you were _frugal_ may have\njust been in your day-to-day life, where you have managed to cut expenses in\norder to prioritize paying off your student loans and therefore decreasing your\naccumulated interest.\n\nOnce you have associated each leadership principle with a project or situation,\nclean up your list. Remove projects or situations that are not associated with\nany soft skills. You should be left with just a list of your _actual_ most\nimpressive projects.\n\nBring this list with you to interview. When you are asked a behavioral\nquestion, if needed, read over this list to jog your memory of a time it\napplied. Do not write the soft skills next to the projects. The point of this\nlist is to be memory-jarring. You should be able to skim it in a few seconds in\nresponse to a question, not spend several minutes reading a page of summaries\nbefore you answer. The combination of the location (project) and event\n(question) should be enough to quickly jog your memory of any relevant\nexperience you may have.\n\nIt may feel odd to have to look at notes of your own life story in response to\na question about yourself, but do not worry. Interviewers are aware of the\nimpact of nervousness during the interview process, and I assure you no one\nwill mind that you took notes about your own soft skills. People struggle with\nthese questions more than any others, so your ability to answer at all will put\nyou ahead of the curve.\n\n### Bring data.\n\nNumbers are the universal language. They remove ambiguity and drive business\ndecisions. If you have data to accommodate your claims, bring it. By what\npercentage did you boost productivity or revenue? How much money did you\ngenerate? How much time did you save? If you only have qualitative results,\nthey are better than nothing. Measuring your efficiency not only drives home\nthe reality of your value, but it shows a mindset of valuing analytical data\nthat indicates that you will do the same on the job.\n\nFor example, some data I collected prior to my last interview:\n\n* I reduced network traffic by 30% (gzipped) to 60% (non-gzipped) by\n  implementing an opt-in (backwards compatible) compression algorithm on the\n  API. This was not a complicated algorithm. I never had formal training in\n  compression or data. I simply noticed that network traffic was being wasted\n  downloading the same property names repeatedly. A quick Google search shows\n  that\n  [I was not the only one to seek this data conversion](https://stackoverflow.com/questions/37988451/convert-array-of-objects-to-an-object-of-arrays).\n  I measured the packet sizes with and without this change, and viola\u200a\u2014\u200adata.\n* I simplified an existing internal testing framework for a project. This\n  resulted in the development time for end-to-end testing decreasing from three\n  days per path to just 1. This wasn\u2019t rocket science. I was annoyed by how\n  difficult the existing framework was to use, so I turned common commands into\n  re-usable function calls. When the team responded that it was much nicer to\n  use, I documented the change in development time.\n\n### Be confident.\n\nConfidence is important. Identify your insecurities and practice addressing\nthem. If your interviewer probes these aspects of you and your achievements,\nyou do not want to validate their concerns by lacking answers.\n\nDo you lack a degree? Why? You thought it was the right choice for you to make.\nWhy? You decided that you could achieve academic equality to a college\ngraduate. Why? Leave your fear of judgment behind and take pride in your\ndecisions. If you cannot be confident that your choices thus far are the right\nones, how can you be trusted to make the right choices for the company?\n\nI lack a degree in Computer Science. It was my biggest insecurity in my first\nattempt to enter the workforce. Now, I am outspoken against learning software\ndevelopment through college curriculums. I am confident that it was the correct\ndecision for me. It would have cost me too much money and provided too little\nbenefit. I learned faster on my own than in a classroom. I have worked with\ndevelopers in open-source, in person, and engaged myself in as many developer\ncommunities as I can find. I have proven that I can comprehend and discuss\ncomplex topics, so I am confident that a college education would not improve\nmyself as a developer. I can articulate that sentiment to an interviewer.\n\nOnce you understand yourself, practice articulating it. Practice by yourself,\nputting your thoughts into words. There is a lot of emotion behind anxiety,\ninsecurity, and fear of judgment. It can be difficult to find the right words\nto label emotionally-charged aspects of your life.\n_Practice, practice, practice._ Once you believe you have adequately described\nyour biggest challenges, practice with friends and relatives. Then, practice\nwith mentors and coworkers. _Practice, practice, practice._\n\nSeek _honest_ feedback. If your goal is to improve or land a job, you do not\nwant your ego stroked. You want constructive _criticism_. Make sure those close\nto you know that they should not be afraid of hurting your ego, and make sure\nyour ego is not hurt by opportunities for self-improvement.\n\n### In the end\u2026\n\nWhen the interview has come to a close, your interviewer will often give you an\nopportunity to ask questions. Do ask questions. This shows that you have an\nactual interest in the company and are not just here for a paycheck. Do not ask\nabout pay, vacation time, time off, or anything else that insinuates that you\ncare more about money than your career. Do ask about company culture,\nopportunities for growth, team dynamics, tech stacks, and making sure you are a\ngood fit for each other. You are interviewing the company just as much as the\ncompany is interviewing you. They do not want to put you in an environment\nwhere you will not be happy\u200a\u2014\u200athat\u2019s the fastest way to have an employee quit.\nIdentify what is important to you, and ask how questions related to your short\nand long term goals.\n\nEnd the interview with a closing statement. It does not feel as natural as it\nshould, but after you have asked your questions, segue to a closing statement.\n\u201cI don\u2019t have any further questions, but I do have one comment.\u201d This is your\nopportunity to describe your best qualities and what you can bring to the team.\nInstead of the interviewer leaving the interview fixated on your minor\nimperfections, have them leave with a positive thought. If your greatest\nqualities did not come up naturally during conversation, now is your\nopportunity to address them. During an interview, the bottom of my notes\nreference a few of what I consider to be my strongest qualities. If they came\nup already, I ignore them; if they did not come up, I bring them up now.\n",J=n(229),$=n.n(J),Q=n(230),V=n.n(Q),X=n(231),Z=n.n(X),ee=n(232),te=n.n(ee),ne=n(233),oe=n.n(ne),ae=n(234),ie=n.n(ae),re={"banner.jpg":U.a,"education.png":$.a,"interview-preparation.jpg":V.a,"mentality.jpg":Z.a,"networking.jpg":te.a,"open-source.png":oe.a,"resume.jpg":ie.a};function se(){return a.a.createElement(N,{images:re},K)}n.d(t,"default",function(){return se})}}]);
//# sourceMappingURL=3.a732e3a6.chunk.js.map